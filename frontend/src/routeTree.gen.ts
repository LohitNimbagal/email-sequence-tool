/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as protectedRouteImport } from './routes/(protected)/route'
import { Route as RouteImport } from './routes/route'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as protectedDashboardIndexImport } from './routes/(protected)/dashboard/index'
import { Route as protectedDashboardSequencesIndexImport } from './routes/(protected)/dashboard/sequences/index'
import { Route as protectedDashboardSequencesSequenceIdIndexImport } from './routes/(protected)/dashboard/sequences/$sequenceId/index'

// Create/Update Routes

const protectedRouteRoute = protectedRouteImport.update({
  id: '/(protected)',
  getParentRoute: () => rootRoute,
} as any)

const RouteRoute = RouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const protectedDashboardIndexRoute = protectedDashboardIndexImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => protectedRouteRoute,
} as any)

const protectedDashboardSequencesIndexRoute =
  protectedDashboardSequencesIndexImport.update({
    id: '/dashboard/sequences/',
    path: '/dashboard/sequences/',
    getParentRoute: () => protectedRouteRoute,
  } as any)

const protectedDashboardSequencesSequenceIdIndexRoute =
  protectedDashboardSequencesSequenceIdIndexImport.update({
    id: '/dashboard/sequences/$sequenceId/',
    path: '/dashboard/sequences/$sequenceId/',
    getParentRoute: () => protectedRouteRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof RouteImport
      parentRoute: typeof rootRoute
    }
    '/(protected)': {
      id: '/(protected)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof protectedRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(protected)/dashboard/': {
      id: '/(protected)/dashboard/'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof protectedDashboardIndexImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/dashboard/sequences/': {
      id: '/(protected)/dashboard/sequences/'
      path: '/dashboard/sequences'
      fullPath: '/dashboard/sequences'
      preLoaderRoute: typeof protectedDashboardSequencesIndexImport
      parentRoute: typeof protectedRouteImport
    }
    '/(protected)/dashboard/sequences/$sequenceId/': {
      id: '/(protected)/dashboard/sequences/$sequenceId/'
      path: '/dashboard/sequences/$sequenceId'
      fullPath: '/dashboard/sequences/$sequenceId'
      preLoaderRoute: typeof protectedDashboardSequencesSequenceIdIndexImport
      parentRoute: typeof protectedRouteImport
    }
  }
}

// Create and export the route tree

interface protectedRouteRouteChildren {
  protectedDashboardIndexRoute: typeof protectedDashboardIndexRoute
  protectedDashboardSequencesIndexRoute: typeof protectedDashboardSequencesIndexRoute
  protectedDashboardSequencesSequenceIdIndexRoute: typeof protectedDashboardSequencesSequenceIdIndexRoute
}

const protectedRouteRouteChildren: protectedRouteRouteChildren = {
  protectedDashboardIndexRoute: protectedDashboardIndexRoute,
  protectedDashboardSequencesIndexRoute: protectedDashboardSequencesIndexRoute,
  protectedDashboardSequencesSequenceIdIndexRoute:
    protectedDashboardSequencesSequenceIdIndexRoute,
}

const protectedRouteRouteWithChildren = protectedRouteRoute._addFileChildren(
  protectedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof protectedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard': typeof protectedDashboardIndexRoute
  '/dashboard/sequences': typeof protectedDashboardSequencesIndexRoute
  '/dashboard/sequences/$sequenceId': typeof protectedDashboardSequencesSequenceIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof protectedRouteRouteWithChildren
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/dashboard': typeof protectedDashboardIndexRoute
  '/dashboard/sequences': typeof protectedDashboardSequencesIndexRoute
  '/dashboard/sequences/$sequenceId': typeof protectedDashboardSequencesSequenceIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof RouteRoute
  '/(protected)': typeof protectedRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(protected)/dashboard/': typeof protectedDashboardIndexRoute
  '/(protected)/dashboard/sequences/': typeof protectedDashboardSequencesIndexRoute
  '/(protected)/dashboard/sequences/$sequenceId/': typeof protectedDashboardSequencesSequenceIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/dashboard/sequences'
    | '/dashboard/sequences/$sequenceId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/dashboard'
    | '/dashboard/sequences'
    | '/dashboard/sequences/$sequenceId'
  id:
    | '__root__'
    | '/'
    | '/(protected)'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(protected)/dashboard/'
    | '/(protected)/dashboard/sequences/'
    | '/(protected)/dashboard/sequences/$sequenceId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  RouteRoute: typeof RouteRoute
  protectedRouteRoute: typeof protectedRouteRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  RouteRoute: RouteRoute,
  protectedRouteRoute: protectedRouteRouteWithChildren,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(protected)",
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/": {
      "filePath": "route.tsx"
    },
    "/(protected)": {
      "filePath": "(protected)/route.tsx",
      "children": [
        "/(protected)/dashboard/",
        "/(protected)/dashboard/sequences/",
        "/(protected)/dashboard/sequences/$sequenceId/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/(protected)/dashboard/": {
      "filePath": "(protected)/dashboard/index.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/dashboard/sequences/": {
      "filePath": "(protected)/dashboard/sequences/index.tsx",
      "parent": "/(protected)"
    },
    "/(protected)/dashboard/sequences/$sequenceId/": {
      "filePath": "(protected)/dashboard/sequences/$sequenceId/index.tsx",
      "parent": "/(protected)"
    }
  }
}
ROUTE_MANIFEST_END */
